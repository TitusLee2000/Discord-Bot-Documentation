{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This documentation will guide you through how to make reminder discord bot throught the use of discords api and python. Our goal is to provide a structure to make any Discord bot for personal use. We will focus on making a simple framework so that it can be adapted for your personal use.</p> <ul> <li>Discord API is a toolbos that lets devloper send or recieve information from discord</li> <li>Python is high-level programming language known for its simplicity and readability</li> </ul>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is designed for users who are new to both python and the setup for a discord bot.</p>"},{"location":"#prerequisite","title":"Prerequisite","text":"<p>This documentation is designed to be used with the following assumptions:</p> <ol> <li> <p>Basic knowledge of Python | You are expected to be able to make a basic program</p> </li> <li> <p>Good standing Discord account | Good standing is required to access neccessary feature for this demonstration</p> </li> <li> <p>A server to add your bot to | if you need help creating a server click here</p> </li> <li> <p>Windows Operating System | Our instructions will be based off the Windows Operating System</p> </li> </ol>"},{"location":"#software-requirments","title":"Software Requirments","text":"<p>Before proceeding, ensure you have the following installed:</p> <ul> <li>Python 3.1x or later</li> <li>Visual Studio Code</li> <li>Discord</li> </ul>"},{"location":"#task-overview","title":"Task Overview","text":"<p>Here are the following tasks that our guide will help walk you through:</p> <ol> <li> <p>Create a discord bot</p> </li> <li> <p>How to add a discord bot</p> </li> <li>Make a reminder for user</li> </ol>"},{"location":"#conventions","title":"Conventions","text":"<ul> <li>Images will be annotated with red boxes to highlight key information to pay attentions</li> <li>code will be displayed in code blocks to view with notes explain   below:</li> </ul> <pre><code>[insert code here]\n</code></pre>"},{"location":"#messages-and-notes","title":"Messages and Notes","text":"<p>Warning</p> <p>Messages that can lead to potential errors will be specified with this tag.</p> <p>Info</p> <p>Messages that contain helpful information will be specified with this tag.</p> <p>Success</p> <p>Messages that lead to a sucessful completion of a task will be specified with this tag.</p>"},{"location":"Glossary/","title":"Glossary","text":"Term Definition Token It is the key for your bot to have access to the Discord server. API API stands for Application Programming Interface. It exposes some of an application's code intentionally for use by other applications. Package A package is essentially a way to organize and structure code by grouping related modules together. Virtual Environment An environment when code is excuted in. Intent Is discord way of deciding how discord bot interacts with the API Regex Short for regular expression and a powerful tool used in programming and text processing to define search patterns for strings."},{"location":"Troubleshooting/","title":"Troubleshooting","text":"Symptoms Probable Cause Action Python code doesn't compile discord.py is an unknown module Make sure discord.py is installed by trying to install again <code>pip install discord.py</code> Discord bot doesn't respond to message input Discord token intent is not set to the right configuration Generate a new token with the right token configuration Did not set the right command prefix Make sure you have <code>bot = commands.Bot(command_prefix='!', intents=discord.Intents.all())</code> in your python <code>.py</code> file Error Type: <code>discord.errors.Forbidden</code> Bot lacks permissions for an action Check the bot\u2019s role in the server and grant necessary permissions (e.g., \"Send Messages,\" \"Manage Roles\") in Discord Error Type: <code>discord.errors.LoginFailure</code> Invalid Token input Double check if token is correctly matched to save else reset and save the new token Error Type: <code>SyntaxError</code> in Python Code typo or incorrect syntax Review the line number in the error message and fix typos (e.g., missing colons, parentheses) Commands trigger multiple times Event listener or command handler duplication Ensure commands are only registered once and check for overlapping <code>on_message</code> listeners overriding commands"},{"location":"taskOne/","title":"Setting Up a Discord Bot","text":""},{"location":"taskOne/#in-this-section-we-will-show-you","title":"In this section we will show you:","text":"<ul> <li> How to create a discord bot and</li> <li> Set up a IDE enviroment to help you start coding your bot</li> </ul> What is an IDE? <p>Integrated development environment (IDE) is a software application that helps programmers develop code more efficiently. There are many options to chose from in the market, but for this demonstration we will be using a free and popular IDE called VSCode</p>"},{"location":"taskOne/#creating-a-discord-bot","title":"Creating a Discord Bot","text":"<p>Prerequisite</p> <p>You will need to have discord account. If you do not have an account please follow the link <code>here</code></p>"},{"location":"taskOne/#steps","title":"Steps:","text":"<ol> <li> <p>Go to <code>Discord Developer Page</code></p> </li> <li> <p>Let us create a new application by pressing 'New Application' at the top-right of the page:</p> </li> </ol> <p>3. When promted by a name, enter the name of your bot. For our example we will call it Grokamoly.</p> <p>4. Accept the terms and coniditons</p> <p>5. Then press 'Create'</p>"},{"location":"taskOne/#customize-your-discord-bot","title":"Customize Your Discord Bot","text":"<p>Congraduations, you've now created a bot! Now lets bring it to life by navigating to the 'Bot' tab located on the left side side of the screen</p> <p>Customization</p> <p>You can choose images that are appropriate if use is for public use.</p>"},{"location":"taskOne/#select-the-intent-of-your-bot","title":"Select The Intent of Your Bot","text":"<p>The intent delarcation is a way to tell Discord what your bot can and cannot do.</p> <p>For this demo you will select from the following image:</p>"},{"location":"taskOne/#activate","title":"Activate:","text":"<ul> <li> Presence Intent</li> <li> Server Members Intent</li> <li> Message Content Intent</li> <li> Save Changes</li> </ul>"},{"location":"taskOne/#create-discord-bots-token","title":"Create Discord bot's token","text":"Token <p>The token is your bot's key to access Discord's API (Application Programing Interface). An API can be thought as a contract between how two devices communicate with each other using requests and respones.</p> <p>We've just changed our intention for our bot and it needs to be updated to let Discord know.</p>"},{"location":"taskOne/#steps_1","title":"Steps:","text":"<p>1. Click on the 'Reset Token' to update Discord's record</p> <p>2. After resetting, there should be a token you can now copy. Save this token in a secure place where you can access it again later</p> Lost or Forgotten Token <p>If you forget to copy or have lost this key, don't panic. Simply repeat step one and a new token will be generated for you</p> <p>Protect Your Token!</p> <p>Never share your token! Think of it as the key to your house. A token is a Bot's key to connect to Discord's server</p> <p>Success</p> <p>At this point, you have successfully create a Discord bot!</p> <ul> <li> How to create a Discord Bot</li> <li> How to setup your IDE for Python</li> </ul>"},{"location":"taskOne/#setting-up-python-in-vscode","title":"Setting Up Python in VSCode","text":"<p>Next lets set up our work station for coding our bot using VSCode.</p> <p>VSCode</p> <p>Visual Studio Code</p>"},{"location":"taskOne/#steps_2","title":"Steps:","text":"<ol> <li> <p>Create a folder on your desktop or your desired location and name it <code>reminderBot</code></p> </li> <li> <p>Open VSCode</p> </li> <li> <p>Click on 'files' in the top left corner, naviagte to 'Open Folder', and browse till you find our folder <code>reminderBot</code>. Then open it</p> </li> <li> <p>To install the Python extension click on the extention icon on the left tab or use command <code>ctrl + shift + x</code></p> </li> </ol> Python Extention <p>We need to set up an environment to translate what we want to say into computer language. For our needs, we will be using Python. In VSCode, there are a number of extentions developers have made, and Python is one of them.</p> <p>5. At the top left, there should be a search bar. Look up Python</p> <p>6. Install Python from Microsoft store</p>"},{"location":"taskOne/#time-to-start-python-virtual","title":"Time to start Python Virtual","text":"<p>We're almost finished the set up. The last step is to create a virual enviroment for the our code. This will help protect your system, prevent conflicts and to have multiple incompatible projects running on the same system without any issues by isolating this project dependencies.</p>"},{"location":"taskOne/#steps_3","title":"Steps:","text":"<ol> <li> <p>lets open the VSCode's command promt using <code>ctrl + shift + p</code></p> </li> <li> <p>Type the following:</p> <pre><code>Python:Select Interpreter\n</code></pre> </li> <li> <p>Select the option <code>Create Virtual Environment</code> It should be the first item</p> <p></p> </li> <li> <p>Select <code>Venv</code> option</p> </li> <li> <p>Select the latest version Python in the options</p> </li> </ol> <p>Install complete</p> <p>You should now see see a new folder show up in your directory</p> <p></p> <p>6. Install important packages</p> <ul> <li> <p>To shortcut to terminal use the command <code>ctrl + shift + ~</code></p> </li> <li> <p>Use the following command to install Discord package</p> </li> </ul> <pre><code>pip install discord.py\n</code></pre> <p>Completed Setup</p> <p>Now you are ready for the next step!</p>"},{"location":"taskOne/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will successfully learned the following:</p> <ul> <li> <p> How to create a Discord Bot</p> </li> <li> <p> How to setup your IDE for Python</p> </li> </ul>"},{"location":"taskTwo/","title":"Setting Up Discord Bot With a Server","text":""},{"location":"taskTwo/#in-this-section-we-will-learn","title":"In this section, we will learn:","text":"<ul> <li> How to invite your Discord bot into your server of choice and</li> <li> Test if your Discord bot is operational</li> </ul>"},{"location":"taskTwo/#inviting-discord-bot-to-a-server","title":"Inviting Discord Bot To a Server","text":"<ol> <li> <p>From current page go to <code>OAUTH2</code> page from the left-side bar</p> <p> </p> </li> <li> <p>Under 'OAuth2 URL Generator' check the <code>bot</code> option</p> <p> </p> </li> <li> <p>Moving to 'BOT PERMISSIONS' check the <code>Administrator</code> option</p> <p> </p> </li> <li> <p>Find your generated URL for your bot and copy it</p> <p> </p> </li> <li> <p>Paste into you prefer browser.</p> </li> <li> <p>After loading the page, it will open discord a prompt you to select your personal server of choice</p> <p> </p> </li> <li> <p>After select the your server, yourl bot will now appear in the server member list as offline</p> <p> </p> </li> </ol> <p>Joined the server</p> <p>Your Discord bot is now visable in your selected server</p> <ul> <li> How to invite your Discord bot into your server of choice and</li> <li> Test if your Discord bot is operational</li> </ul> <p></p> <p></p>"},{"location":"taskTwo/#testing-your-discord-bot-works-in-your-server","title":"Testing Your Discord Bot Works In Your Server","text":"<p>The following steps will all be inside one file*</p>"},{"location":"taskTwo/#steps","title":"Steps:","text":"<ol> <li> <p>First, in VSCode let us add a new file to our file and name it <code>test.py</code>. To do this, either click on the new file icon, or use the command <code>crtl + n</code> to create a new file</p> <p> </p> <p>Follow Instruction</p> <p>Copy the following code into your <code>python.py</code>:</p> </li> <li> <p>Helps set up important packages we will need for this file</p> <pre><code>import discord\nfrom discord.ext import commands\n</code></pre> </li> <li> <p>Initialize prefix for command in Discord server</p> <pre><code>bot = commands.Bot(command_prefix='!', intents=discord.Intents.all())\n</code></pre> </li> <li> <p>Add a code the displays a ready msg from the Discord bot in the terminal</p> <pre><code>@bot.event\nasync def on_ready():\n    print(f'Logged in as {bot.user.name} ({bot.user.id})')\n    print('------')\n</code></pre> </li> <li> <p>Implement a simple command program when your Discord bot will reply with <code>Pong!</code></p> <pre><code>@bot.command()\nasync def ping(ctx):\n    await ctx.send('Pong!')\n</code></pre> </li> </ol> <p></p> <ol> <li> <p>Implement a simple program that will reply to the user with a <code>Hello, @user</code> and ping to.</p> <pre><code>@bot.command()\nasync def hello(ctx):\n    await ctx.send(f'Hello, {ctx.author.mention}!')\n</code></pre> </li> <li> <p>Replace <code>YOUR_TOKEN_HERE</code> with your Discord bot's token to allow the bot to connect to discord server API</p> <pre><code>bot.run('YOUR_TOKEN_HERE')\n</code></pre> <p>If token is invalid</p> <p>The program crash on compile</p> </li> <li> <p>To run the program</p> <p> </p> Code doesn't not run! <p>You can use this command to run the Python file with this below:</p> <pre><code>py test.py\n</code></pre> </li> <li> <p>When you test it the result should look similar to this below:</p> <p> </p> </li> </ol> <p>Discord Bot's responds</p> <p>Now your Discord bot will respond to certain commands</p>"},{"location":"taskTwo/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will successfully learned the following:</p> <ul> <li> <p> How to invite a Discord Bot to your server</p> </li> <li> <p> How to test basic programs with you Discord Bot</p> </li> </ul>"},{"location":"taskthree/","title":"Setting Up Discord Bot Reminder Program","text":""},{"location":"taskthree/#in-this-section-we-will-learn","title":"In this section we will learn:","text":"<ul> <li> Set up packages</li> <li> Create a parse_time() helper fuction</li> <li> Create the main function</li> <li> How to make reminder program with your Discord bot</li> </ul> <p>Coding Portion</p> <p>This is the very last stage which gives Grokamoly a heart and a purpose! It is also the stage where the most coding is required, but don't be too overwhelmed. We recommend you to run through the steps once to get everything working and come back to examine what each function does. Best if you played around with it too. With that spirit at heart, the following documention lists out the purpose of each snipet as well as what you can and 'cannot' change.</p> <p></p>"},{"location":"taskthree/#initialization-of-all-required-packages","title":"Initialization of all required packages","text":"<p>To use Dicord's funcions and utility, we need to pull in their library</p>"},{"location":"taskthree/#steps","title":"Steps:","text":"<ol> <li> <p>Using the same directory as <code>python.py</code>, make a new file called <code>reminder.py</code></p> </li> <li> <p>Initialize imports for the <code>Python</code> file.</p> <p>&lt;Do Not Change&gt;</p> <pre><code>import discord\nfrom discord.ext import commands\nimport asyncio\nfrom datetime import datetime\nimport re\n</code></pre> </li> <li> <p>Insert the code your Discord Bot to recogonize the command</p> <p>&lt;Do Not Change&gt;</p> <pre><code>intents = discord.Intents.all()\nbot = commands.Bot(command_prefix='!', intents=intents)\n</code></pre> </li> </ol> <p>Success</p> <ul> <li> Set up packages</li> <li> Create a parse_time() helper fuction</li> <li> Create the main function</li> <li> How to make reminder program with your Discord bot</li> </ul>"},{"location":"taskthree/#create-helper-function-to-parse-time-from-commands","title":"Create helper function to parse Time from commands","text":"What are helper functions? <p>Helper functions are ways programmers re-use code and to clean the main logic of the program by abstracting away the small details</p> <p></p>"},{"location":"taskthree/#setting-up-the-parse_time-function","title":"Setting up the <code>parse_time()</code> function","text":"<p>This function determins which date type it is in and find the exact current time.</p>"},{"location":"taskthree/#steps_1","title":"Steps:","text":"<ol> <li> <p>Define your function <code>parse_time</code> and it takes in the paramter <code>time_str</code></p> <pre><code>def parse_time(time_str):\n    \"\"\"Parse time input like '5m', '2h', '1d' or 'YYYY-MM-DD HH:MM'\"\"\"\n</code></pre> <p></p> </li> <li> <p>Insert a format checker to ensure time can be read correctly then find the differece fromo current time and desire time to be set</p> <pre><code>def parse_time(time_str):\n    \"\"\"Parse time input like '5m', '2h', '1d' or 'YYYY-MM-DD HH:MM'\"\"\"\n    for date_format in ('%Y-%m-%d %H:%M', '%Y-%m-%d %H:%M:%S'):\n        try:\n            current_time = datetime.strptime(time_str.strip(), date_formate)\n            seconds = (current_time - datetime.now()).total_seconds()\n            return seconds\n        except ValueError:\n            pass\n</code></pre> <p></p> </li> <li> <p>Insert a regex checker if user wants timer from secs, mins, hours, or days</p> <pre><code>def parse_time(time_str):\n    \"\"\"Parse time input like '5m', '2h', '1d' or 'YYYY-MM-DD HH:MM'\"\"\"\n    for date_format in ('%Y-%m-%d %H:%M', '%Y-%m-%d %H:%M:%S'):\n        try:\n            current_time = datetime.strptime(time_str.strip(), date_formate)\n            seconds = (current_time - datetime.now()).total_seconds()\n            return seconds\n        except ValueError:\n            pass\n    time_units = {'s': 1, 'm': 60, 'h': 3600, 'd': 86400}\n    match = re.match(r'(\\d+)([smhd])', time_str.lower())\n</code></pre> <p></p> </li> <li> <p>Add a if statement to determine if it is match return the time in seconds else print a error message</p> </li> </ol> <pre><code>def parse_time(time_str):\n    \"\"\"Parse time input like '5m', '2h', '1d' or 'YYYY-MM-DD HH:MM'\"\"\"\n    for date_format in ('%Y-%m-%d %H:%M', '%Y-%m-%d %H:%M:%S'):\n        try:\n            current_time = datetime.strptime(time_str.strip(), date_formate)\n            seconds = (current_time - datetime.now()).total_seconds()\n            return seconds\n        except ValueError:\n            pass\n    time_units = {'s': 1, 'm': 60, 'h': 3600, 'd': 86400}\n    match = re.match(r'(\\d+)([smhd])', time_str.lower())\n    if match:\n        amount, unit = match.groups()\n        return int(amount) * time_units[unit]\n</code></pre> <p></p> <p>Completed Code</p> <p>This is what your completed code should look like</p> <pre><code>\"\"\"\nThis function determins which date type it is in and find the exact current time.\n\"\"\"\ndef parse_time(time_str):\n    \"\"\"Parse time input like '5m', '2h', '1d' or 'YYYY-MM-DD HH:MM'\"\"\"\n    for date_format in ('%Y-%m-%d %H:%M', '%Y-%m-%d %H:%M:%S'):\n        try:\n            current_time = datetime.strptime(time_str.strip(), date_formate)\n            seconds = (current_time - datetime.now()).total_seconds()\n            return seconds\n        except ValueError:\n            pass\n    time_units = {'s': 1, 'm': 60, 'h': 3600, 'd': 86400}\n    match = re.match(r'(\\d+)([smhd])', time_str.lower())\n    if match:\n        amount, unit = match.groups()\n        return int(amount) * time_units[unit]\n</code></pre> <ul> <li> Set up packages</li> <li> Create a parse_time() helper fuction</li> <li> Create the main function</li> <li> How to make reminder program with your Discord bot</li> </ul> <p></p>"},{"location":"taskthree/#add-program-interface-for-discord-bot-called-remind","title":"Add program interface for Discord Bot called <code>remind</code>","text":"<p>Here is the main funcion of our program that brings everything things together</p>"},{"location":"taskthree/#steps_2","title":"Steps:","text":"<ol> <li> <p>Define your function for <code>remind</code> with the parameter <code>ctx, time_str: str, *, message:str</code></p> <pre><code>@bot.command()\nasync def remind(ctx, time_str: str, *, message: str):\n\"\"\"Set a reminder. Usage: !remind &lt;time&gt; &lt;message&gt; (e.g., !remind 5m Break or !remind \"2025-04-03 14:30\" Meeting)\"\"\"\n</code></pre> <p></p> </li> <li> <p>Add a code the replace <code>','</code> with <code>' '</code> so the <code>parse_time</code> function and operate on it</p> <pre><code>@bot.command()\nasync def remind(ctx, time_str: str, *, message: str):\n\"\"\"Set a reminder. Usage: !remind &lt;time&gt; &lt;message&gt; (e.g., !remind 5m Break or !remind \"2025-04-03 14:30\" Meeting)\"\"\"\ntime_str = time_str.replace(',', ' ').strip()\n</code></pre> </li> </ol> <p></p> <ol> <li> <p>Add checkers to see if is greater than 0 seconds and if reminder is a timer or a set time</p> <pre><code>@bot.command()\nasync def remind(ctx, time_str: str, *, message: str):\n\"\"\"Set a reminder. Usage: !remind &lt;time&gt; &lt;message&gt; (e.g., !remind 5m Break or !remind \"2025-04-03 14:30\" Meeting)\"\"\"\ntime_str = time_str.replace(',', ' ').strip()\ntry:\n    seconds = parse_time(time_str)\n    if seconds &lt;= 0:\n        await ctx.send(\"Please set a reminder for a future time!\")\n        return\n\n    # Adjust confirmation message based on input type\n    if ' ' in time_str:  # Absolute time\n        await ctx.send(f\"Reminder set for '{message}' at {time_str}.\")\n    else:  # Relative time\n        await ctx.send(f\"Reminder set for '{message}' in {time_str}.\")\n\n    await asyncio.sleep(seconds)\n    await ctx.send(f\"{ctx.author.mention}, here's your reminder: {message}\")\n</code></pre> <p></p> </li> <li> <p>Add a error return message section to allow error display for user</p> <pre><code>@bot.command()\nasync def remind(ctx, time_str: str, *, message: str):\n\"\"\"Set a reminder. Usage: !remind &lt;time&gt; &lt;message&gt; (e.g., !remind 5m Break or !remind \"2025-04-03 14:30\" Meeting)\"\"\"\ntime_str = time_str.replace(',', ' ').strip()\ntry:\n    seconds = parse_time(time_str)\n    if seconds &lt;= 0:\n        await ctx.send(\"Please set a reminder for a future time!\")\n        return\n\n    # Adjust confirmation message based on input type\n    if ' ' in time_str:  # Absolute time\n        await ctx.send(f\"Reminder set for '{message}' at {time_str}.\")\n    else:  # Relative time\n        await ctx.send(f\"Reminder set for '{message}' in {time_str}.\")\n\n    await asyncio.sleep(seconds)\n    await ctx.send(f\"{ctx.author.mention}, here's your reminder: {message}\")\nexcept ValueError as e:\n    await ctx.send(f\"Error: {str(e)}\")\n</code></pre> <p></p> </li> <li> <p>Insert Your Discord Bot's Token</p> <pre><code>bot.run('Insert Token Here')\n</code></pre> <p>Success</p> <ul> <li> Set up packages</li> <li> Create a parse_time() helper fuction</li> <li> Create the main function</li> <li> How to make reminder program with your Discord bot</li> </ul> <p></p> </li> </ol>"},{"location":"taskthree/#test-within-discord-server","title":"Test within Discord server","text":""},{"location":"taskthree/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will successfully learned the following:</p> <ul> <li> Set up packages</li> <li> Create a parse_time() helper fuction</li> <li> Create the main function</li> <li> How to make reminder program with your Discord bot</li> </ul>"}]}